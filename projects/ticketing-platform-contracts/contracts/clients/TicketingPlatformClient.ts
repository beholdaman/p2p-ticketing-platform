/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"TicketingPlatform","desc":"","methods":[{"name":"newListing","args":[{"name":"appCall","type":"appl"},{"name":"xfer","type":"axfer"},{"name":"unitaryPrice","type":"uint64"},{"name":"mbrPay","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"changePrice","args":[{"name":"appCall","type":"appl"},{"name":"asset","type":"uint64"},{"name":"newPrice","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"buy","args":[{"name":"appCall","type":"appl"},{"name":"asset","type":"uint64"},{"name":"buyPay","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"withdrawAsset","args":[{"name":"appCall","type":"appl"},{"name":"asset","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}}],"arcs":[4,56],"structs":{"listingValue":[{"name":"owner","type":"address"},{"name":"unitaryPrice","type":"uint64"}],"listingKey":[{"name":"asset","type":"uint64"}]},"state":{"schema":{"global":{"bytes":0,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"listings":{"keyType":"listingKey","valueType":"listingValue"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[0]},{"teal":2,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[1,2,3,4,5,6,7,8,9,10,11]},{"teal":3,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[12,13,14]},{"teal":15,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[15,16]},{"teal":16,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[17]},{"teal":17,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[18]},{"teal":18,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[19]},{"teal":19,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[20,21]},{"teal":20,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[22]},{"teal":21,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48]},{"teal":25,"source":"contracts\\TicketingPlatform.algo.ts:18","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[49]},{"teal":29,"source":"contracts\\TicketingPlatform.algo.ts:25","pc":[50,51,52]},{"teal":33,"source":"contracts\\TicketingPlatform.algo.ts:28","pc":[53,54]},{"teal":34,"source":"contracts\\TicketingPlatform.algo.ts:28","pc":[55,56]},{"teal":35,"source":"contracts\\TicketingPlatform.algo.ts:28","pc":[57,58]},{"teal":36,"source":"contracts\\TicketingPlatform.algo.ts:28","pc":[59]},{"teal":37,"source":"contracts\\TicketingPlatform.algo.ts:28","pc":[60]},{"teal":38,"source":"contracts\\TicketingPlatform.algo.ts:28","pc":[61]},{"teal":39,"source":"contracts\\TicketingPlatform.algo.ts:28","pc":[62]},{"teal":48,"source":"contracts\\TicketingPlatform.algo.ts:32","pc":[63]},{"teal":49,"source":"contracts\\TicketingPlatform.algo.ts:32","pc":[64,65]},{"teal":50,"source":"contracts\\TicketingPlatform.algo.ts:32","pc":[66,67]},{"teal":54,"source":"contracts\\TicketingPlatform.algo.ts:33","pc":[68,69]},{"teal":55,"source":"contracts\\TicketingPlatform.algo.ts:33","pc":[70,71]},{"teal":59,"source":"contracts\\TicketingPlatform.algo.ts:34","pc":[72,73]},{"teal":60,"source":"contracts\\TicketingPlatform.algo.ts:34","pc":[74,75]},{"teal":64,"source":"contracts\\TicketingPlatform.algo.ts:35","pc":[76,77]},{"teal":65,"source":"contracts\\TicketingPlatform.algo.ts:35","pc":[78,79]},{"teal":69,"source":"contracts\\TicketingPlatform.algo.ts:36","pc":[80]},{"teal":70,"source":"contracts\\TicketingPlatform.algo.ts:36","pc":[81,82]},{"teal":73,"source":"contracts\\TicketingPlatform.algo.ts:32","pc":[83]},{"teal":74,"source":"contracts\\TicketingPlatform.algo.ts:32","pc":[84,85]},{"teal":77,"source":"contracts\\TicketingPlatform.algo.ts:32","pc":[86]},{"teal":78,"source":"contracts\\TicketingPlatform.algo.ts:25","pc":[87]},{"teal":83,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[88,89]},{"teal":84,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[90]},{"teal":85,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[91]},{"teal":86,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[92]},{"teal":87,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[93,94]},{"teal":88,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[95]},{"teal":89,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[96]},{"teal":92,"source":"contracts\\TicketingPlatform.algo.ts:43","errorMessage":"argument 0 (mbrPay) for newListing must be a pay transaction","pc":[97]},{"teal":95,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[98,99,100]},{"teal":96,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[101]},{"teal":99,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[102,103]},{"teal":100,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[104,105]},{"teal":101,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[106]},{"teal":102,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[107]},{"teal":103,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[108,109]},{"teal":104,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[110,111]},{"teal":105,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[112]},{"teal":108,"source":"contracts\\TicketingPlatform.algo.ts:43","errorMessage":"argument 2 (xfer) for newListing must be a axfer transaction","pc":[113]},{"teal":111,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[114,115]},{"teal":112,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[116,117]},{"teal":113,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[118]},{"teal":114,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[119]},{"teal":115,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[120,121]},{"teal":116,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[122]},{"teal":117,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[123]},{"teal":120,"source":"contracts\\TicketingPlatform.algo.ts:43","errorMessage":"argument 3 (appCall) for newListing must be a appl transaction","pc":[124]},{"teal":123,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[125,126,127]},{"teal":124,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[128]},{"teal":125,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[129]},{"teal":129,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[130,131,132]},{"teal":133,"source":"contracts\\TicketingPlatform.algo.ts:46","pc":[133,134]},{"teal":134,"source":"contracts\\TicketingPlatform.algo.ts:46","pc":[135]},{"teal":135,"source":"contracts\\TicketingPlatform.algo.ts:46","pc":[136]},{"teal":136,"source":"contracts\\TicketingPlatform.algo.ts:46","pc":[137]},{"teal":142,"source":"contracts\\TicketingPlatform.algo.ts:50","pc":[138,139]},{"teal":143,"source":"contracts\\TicketingPlatform.algo.ts:50","pc":[140,141]},{"teal":144,"source":"contracts\\TicketingPlatform.algo.ts:50","pc":[142]},{"teal":145,"source":"contracts\\TicketingPlatform.algo.ts:49","pc":[143]},{"teal":146,"source":"contracts\\TicketingPlatform.algo.ts:49","pc":[144]},{"teal":147,"source":"contracts\\TicketingPlatform.algo.ts:49","pc":[145]},{"teal":148,"source":"contracts\\TicketingPlatform.algo.ts:49","pc":[146]},{"teal":149,"source":"contracts\\TicketingPlatform.algo.ts:49","pc":[147]},{"teal":154,"source":"contracts\\TicketingPlatform.algo.ts:54","pc":[148,149]},{"teal":155,"source":"contracts\\TicketingPlatform.algo.ts:54","pc":[150,151]},{"teal":156,"source":"contracts\\TicketingPlatform.algo.ts:54","pc":[152,153]},{"teal":157,"source":"contracts\\TicketingPlatform.algo.ts:54","pc":[154,155]},{"teal":158,"source":"contracts\\TicketingPlatform.algo.ts:54","pc":[156]},{"teal":159,"source":"contracts\\TicketingPlatform.algo.ts:54","pc":[157]},{"teal":160,"source":"contracts\\TicketingPlatform.algo.ts:54","pc":[158,159,160]},{"teal":170,"source":"contracts\\TicketingPlatform.algo.ts:57","pc":[161,162]},{"teal":171,"source":"contracts\\TicketingPlatform.algo.ts:58","pc":[163,164]},{"teal":172,"source":"contracts\\TicketingPlatform.algo.ts:58","pc":[165,166]},{"teal":173,"source":"contracts\\TicketingPlatform.algo.ts:58","pc":[167,168]},{"teal":174,"source":"contracts\\TicketingPlatform.algo.ts:58","pc":[169]},{"teal":177,"source":"contracts\\TicketingPlatform.algo.ts:58","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"appCall.sender\"}","pc":[170]},{"teal":180,"source":"contracts\\TicketingPlatform.algo.ts:57","pc":[171,172]},{"teal":181,"source":"contracts\\TicketingPlatform.algo.ts:59","pc":[173,174]},{"teal":182,"source":"contracts\\TicketingPlatform.algo.ts:59","pc":[175,176]},{"teal":183,"source":"contracts\\TicketingPlatform.algo.ts:59","pc":[177]},{"teal":186,"source":"contracts\\TicketingPlatform.algo.ts:59","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[178]},{"teal":189,"source":"contracts\\TicketingPlatform.algo.ts:57","pc":[179,180]},{"teal":190,"source":"contracts\\TicketingPlatform.algo.ts:60","pc":[181,182]},{"teal":191,"source":"contracts\\TicketingPlatform.algo.ts:12","pc":[183]},{"teal":192,"source":"contracts\\TicketingPlatform.algo.ts:60","pc":[184,185]},{"teal":193,"source":"contracts\\TicketingPlatform.algo.ts:60","pc":[186]},{"teal":194,"source":"contracts\\TicketingPlatform.algo.ts:60","pc":[187]},{"teal":197,"source":"contracts\\TicketingPlatform.algo.ts:60","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"listingMbr + globals.assetOptInMinBalance\"}","pc":[188]},{"teal":201,"source":"contracts\\TicketingPlatform.algo.ts:63","pc":[189,190]},{"teal":202,"source":"contracts\\TicketingPlatform.algo.ts:63","pc":[191,192]},{"teal":203,"source":"contracts\\TicketingPlatform.algo.ts:63","pc":[193,194,195]},{"teal":204,"source":"contracts\\TicketingPlatform.algo.ts:54","pc":[196,197,198]},{"teal":214,"source":"contracts\\TicketingPlatform.algo.ts:68","pc":[199,200]},{"teal":215,"source":"contracts\\TicketingPlatform.algo.ts:69","pc":[201,202]},{"teal":216,"source":"contracts\\TicketingPlatform.algo.ts:69","pc":[203,204]},{"teal":217,"source":"contracts\\TicketingPlatform.algo.ts:69","pc":[205,206]},{"teal":218,"source":"contracts\\TicketingPlatform.algo.ts:69","pc":[207]},{"teal":221,"source":"contracts\\TicketingPlatform.algo.ts:69","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"sender\",\"expected\":\"appCall.sender\"}","pc":[208]},{"teal":224,"source":"contracts\\TicketingPlatform.algo.ts:68","pc":[209,210]},{"teal":225,"source":"contracts\\TicketingPlatform.algo.ts:70","pc":[211,212]},{"teal":226,"source":"contracts\\TicketingPlatform.algo.ts:70","pc":[213,214]},{"teal":227,"source":"contracts\\TicketingPlatform.algo.ts:70","pc":[215]},{"teal":230,"source":"contracts\\TicketingPlatform.algo.ts:70","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[216]},{"teal":233,"source":"contracts\\TicketingPlatform.algo.ts:68","pc":[217,218]},{"teal":234,"source":"contracts\\TicketingPlatform.algo.ts:71","pc":[219,220]},{"teal":235,"source":"contracts\\TicketingPlatform.algo.ts:12","pc":[221]},{"teal":236,"source":"contracts\\TicketingPlatform.algo.ts:71","pc":[222]},{"teal":239,"source":"contracts\\TicketingPlatform.algo.ts:71","errorMessage":"transaction verification failed: {\"txn\":\"mbrPay\",\"field\":\"amount\",\"expected\":\"listingMbr\"}","pc":[223]},{"teal":249,"source":"contracts\\TicketingPlatform.algo.ts:76","pc":[224,225]},{"teal":250,"source":"contracts\\TicketingPlatform.algo.ts:77","pc":[226,227]},{"teal":251,"source":"contracts\\TicketingPlatform.algo.ts:77","pc":[228,229]},{"teal":252,"source":"contracts\\TicketingPlatform.algo.ts:77","pc":[230,231]},{"teal":253,"source":"contracts\\TicketingPlatform.algo.ts:77","pc":[232]},{"teal":256,"source":"contracts\\TicketingPlatform.algo.ts:77","errorMessage":"transaction verification failed: {\"txn\":\"xfer\",\"field\":\"sender\",\"expected\":\"appCall.sender\"}","pc":[233]},{"teal":259,"source":"contracts\\TicketingPlatform.algo.ts:76","pc":[234,235]},{"teal":260,"source":"contracts\\TicketingPlatform.algo.ts:78","pc":[236,237]},{"teal":261,"source":"contracts\\TicketingPlatform.algo.ts:78","pc":[238,239]},{"teal":262,"source":"contracts\\TicketingPlatform.algo.ts:78","pc":[240]},{"teal":265,"source":"contracts\\TicketingPlatform.algo.ts:78","errorMessage":"transaction verification failed: {\"txn\":\"xfer\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","pc":[241]},{"teal":268,"source":"contracts\\TicketingPlatform.algo.ts:76","pc":[242,243]},{"teal":269,"source":"contracts\\TicketingPlatform.algo.ts:79","pc":[244,245]},{"teal":270,"source":"contracts\\TicketingPlatform.algo.ts:79","pc":[246]},{"teal":271,"source":"contracts\\TicketingPlatform.algo.ts:79","pc":[247]},{"teal":274,"source":"contracts\\TicketingPlatform.algo.ts:79","errorMessage":"transaction verification failed: {\"txn\":\"xfer\",\"field\":\"assetAmount\",\"expected\":\"1\"}","pc":[248]},{"teal":280,"source":"contracts\\TicketingPlatform.algo.ts:86","pc":[249,250]},{"teal":281,"source":"contracts\\TicketingPlatform.algo.ts:86","pc":[251,252]},{"teal":282,"source":"contracts\\TicketingPlatform.algo.ts:86","pc":[253]},{"teal":283,"source":"contracts\\TicketingPlatform.algo.ts:87","pc":[254,255]},{"teal":284,"source":"contracts\\TicketingPlatform.algo.ts:87","pc":[256,257]},{"teal":285,"source":"contracts\\TicketingPlatform.algo.ts:87","pc":[258,259]},{"teal":286,"source":"contracts\\TicketingPlatform.algo.ts:87","pc":[260]},{"teal":287,"source":"contracts\\TicketingPlatform.algo.ts:87","pc":[261]},{"teal":288,"source":"contracts\\TicketingPlatform.algo.ts:85","pc":[262]},{"teal":289,"source":"contracts\\TicketingPlatform.algo.ts:43","pc":[263]},{"teal":294,"source":"contracts\\TicketingPlatform.algo.ts:92","pc":[264,265,266]},{"teal":295,"source":"contracts\\TicketingPlatform.algo.ts:92","pc":[267]},{"teal":298,"source":"contracts\\TicketingPlatform.algo.ts:92","pc":[268,269,270]},{"teal":299,"source":"contracts\\TicketingPlatform.algo.ts:92","pc":[271]},{"teal":302,"source":"contracts\\TicketingPlatform.algo.ts:92","pc":[272,273]},{"teal":303,"source":"contracts\\TicketingPlatform.algo.ts:92","pc":[274]},{"teal":304,"source":"contracts\\TicketingPlatform.algo.ts:92","pc":[275]},{"teal":305,"source":"contracts\\TicketingPlatform.algo.ts:92","pc":[276]},{"teal":306,"source":"contracts\\TicketingPlatform.algo.ts:92","pc":[277,278]},{"teal":307,"source":"contracts\\TicketingPlatform.algo.ts:92","pc":[279]},{"teal":308,"source":"contracts\\TicketingPlatform.algo.ts:92","pc":[280]},{"teal":311,"source":"contracts\\TicketingPlatform.algo.ts:92","errorMessage":"argument 2 (appCall) for changePrice must be a appl transaction","pc":[281]},{"teal":314,"source":"contracts\\TicketingPlatform.algo.ts:92","pc":[282,283,284]},{"teal":315,"source":"contracts\\TicketingPlatform.algo.ts:92","pc":[285]},{"teal":316,"source":"contracts\\TicketingPlatform.algo.ts:92","pc":[286]},{"teal":320,"source":"contracts\\TicketingPlatform.algo.ts:92","pc":[287,288,289]},{"teal":324,"source":"contracts\\TicketingPlatform.algo.ts:95","pc":[290,291]},{"teal":325,"source":"contracts\\TicketingPlatform.algo.ts:95","pc":[292]},{"teal":326,"source":"contracts\\TicketingPlatform.algo.ts:95","pc":[293]},{"teal":327,"source":"contracts\\TicketingPlatform.algo.ts:95","pc":[294]},{"teal":331,"source":"contracts\\TicketingPlatform.algo.ts:98","pc":[295]},{"teal":332,"source":"contracts\\TicketingPlatform.algo.ts:98","pc":[296,297]},{"teal":333,"source":"contracts\\TicketingPlatform.algo.ts:98","pc":[298,299]},{"teal":334,"source":"contracts\\TicketingPlatform.algo.ts:98","pc":[300]},{"teal":335,"source":"contracts\\TicketingPlatform.algo.ts:98","pc":[301,302]},{"teal":336,"source":"contracts\\TicketingPlatform.algo.ts:98","pc":[303]},{"teal":337,"source":"contracts\\TicketingPlatform.algo.ts:98","pc":[304,305]},{"teal":338,"source":"contracts\\TicketingPlatform.algo.ts:98","pc":[306,307]},{"teal":339,"source":"contracts\\TicketingPlatform.algo.ts:98","pc":[308]},{"teal":340,"source":"contracts\\TicketingPlatform.algo.ts:98","pc":[309]},{"teal":346,"source":"contracts\\TicketingPlatform.algo.ts:101","pc":[310,311]},{"teal":347,"source":"contracts\\TicketingPlatform.algo.ts:101","pc":[312]},{"teal":348,"source":"contracts\\TicketingPlatform.algo.ts:102","pc":[313,314]},{"teal":349,"source":"contracts\\TicketingPlatform.algo.ts:102","pc":[315,316]},{"teal":350,"source":"contracts\\TicketingPlatform.algo.ts:102","pc":[317,318]},{"teal":351,"source":"contracts\\TicketingPlatform.algo.ts:102","pc":[319]},{"teal":352,"source":"contracts\\TicketingPlatform.algo.ts:102","pc":[320]},{"teal":353,"source":"contracts\\TicketingPlatform.algo.ts:100","pc":[321]},{"teal":354,"source":"contracts\\TicketingPlatform.algo.ts:92","pc":[322]},{"teal":359,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[323,324]},{"teal":360,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[325]},{"teal":361,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[326]},{"teal":362,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[327]},{"teal":363,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[328,329]},{"teal":364,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[330]},{"teal":365,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[331]},{"teal":368,"source":"contracts\\TicketingPlatform.algo.ts:109","errorMessage":"argument 0 (buyPay) for buy must be a pay transaction","pc":[332]},{"teal":371,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[333,334,335]},{"teal":372,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[336]},{"teal":375,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[337,338]},{"teal":376,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[339,340]},{"teal":377,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[341]},{"teal":378,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[342]},{"teal":379,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[343,344]},{"teal":380,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[345]},{"teal":381,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[346]},{"teal":384,"source":"contracts\\TicketingPlatform.algo.ts:109","errorMessage":"argument 2 (appCall) for buy must be a appl transaction","pc":[347]},{"teal":387,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[348,349,350]},{"teal":388,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[351]},{"teal":389,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[352]},{"teal":393,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[353,354,355]},{"teal":396,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[356]},{"teal":397,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[357,358]},{"teal":401,"source":"contracts\\TicketingPlatform.algo.ts:112","pc":[359,360]},{"teal":402,"source":"contracts\\TicketingPlatform.algo.ts:112","pc":[361,362]},{"teal":403,"source":"contracts\\TicketingPlatform.algo.ts:112","pc":[363,364]},{"teal":404,"source":"contracts\\TicketingPlatform.algo.ts:112","pc":[365]},{"teal":405,"source":"contracts\\TicketingPlatform.algo.ts:112","pc":[366,367]},{"teal":406,"source":"contracts\\TicketingPlatform.algo.ts:112","pc":[368]},{"teal":407,"source":"contracts\\TicketingPlatform.algo.ts:112","pc":[369]},{"teal":408,"source":"contracts\\TicketingPlatform.algo.ts:112","pc":[370,371]},{"teal":412,"source":"contracts\\TicketingPlatform.algo.ts:113","pc":[372]},{"teal":413,"source":"contracts\\TicketingPlatform.algo.ts:113","pc":[373,374]},{"teal":414,"source":"contracts\\TicketingPlatform.algo.ts:113","pc":[375,376]},{"teal":415,"source":"contracts\\TicketingPlatform.algo.ts:113","pc":[377]},{"teal":416,"source":"contracts\\TicketingPlatform.algo.ts:113","pc":[378,379]},{"teal":417,"source":"contracts\\TicketingPlatform.algo.ts:113","pc":[380]},{"teal":418,"source":"contracts\\TicketingPlatform.algo.ts:113","pc":[381,382]},{"teal":422,"source":"contracts\\TicketingPlatform.algo.ts:116","pc":[383,384]},{"teal":423,"source":"contracts\\TicketingPlatform.algo.ts:116","pc":[385,386]},{"teal":424,"source":"contracts\\TicketingPlatform.algo.ts:116","pc":[387,388]},{"teal":425,"source":"contracts\\TicketingPlatform.algo.ts:116","pc":[389]},{"teal":426,"source":"contracts\\TicketingPlatform.algo.ts:116","pc":[390,391]},{"teal":435,"source":"contracts\\TicketingPlatform.algo.ts:119","pc":[392,393]},{"teal":436,"source":"contracts\\TicketingPlatform.algo.ts:120","pc":[394,395]},{"teal":437,"source":"contracts\\TicketingPlatform.algo.ts:120","pc":[396,397]},{"teal":438,"source":"contracts\\TicketingPlatform.algo.ts:120","pc":[398,399]},{"teal":439,"source":"contracts\\TicketingPlatform.algo.ts:120","pc":[400]},{"teal":442,"source":"contracts\\TicketingPlatform.algo.ts:120","errorMessage":"transaction verification failed: {\"txn\":\"buyPay\",\"field\":\"sender\",\"expected\":\"appCall.sender\"}","pc":[401]},{"teal":445,"source":"contracts\\TicketingPlatform.algo.ts:119","pc":[402,403]},{"teal":446,"source":"contracts\\TicketingPlatform.algo.ts:121","pc":[404,405]},{"teal":447,"source":"contracts\\TicketingPlatform.algo.ts:121","pc":[406,407]},{"teal":448,"source":"contracts\\TicketingPlatform.algo.ts:121","pc":[408]},{"teal":451,"source":"contracts\\TicketingPlatform.algo.ts:121","errorMessage":"transaction verification failed: {\"txn\":\"buyPay\",\"field\":\"receiver\",\"expected\":\"owner\"}","pc":[409]},{"teal":454,"source":"contracts\\TicketingPlatform.algo.ts:119","pc":[410,411]},{"teal":455,"source":"contracts\\TicketingPlatform.algo.ts:122","pc":[412,413]},{"teal":456,"source":"contracts\\TicketingPlatform.algo.ts:122","pc":[414,415]},{"teal":457,"source":"contracts\\TicketingPlatform.algo.ts:122","pc":[416]},{"teal":460,"source":"contracts\\TicketingPlatform.algo.ts:122","errorMessage":"transaction verification failed: {\"txn\":\"buyPay\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=currentPrice\"}","pc":[417]},{"teal":468,"source":"contracts\\TicketingPlatform.algo.ts:126","pc":[418]},{"teal":469,"source":"contracts\\TicketingPlatform.algo.ts:126","pc":[419,420]},{"teal":470,"source":"contracts\\TicketingPlatform.algo.ts:126","pc":[421,422]},{"teal":474,"source":"contracts\\TicketingPlatform.algo.ts:127","pc":[423,424]},{"teal":475,"source":"contracts\\TicketingPlatform.algo.ts:127","pc":[425,426]},{"teal":479,"source":"contracts\\TicketingPlatform.algo.ts:128","pc":[427,428]},{"teal":480,"source":"contracts\\TicketingPlatform.algo.ts:128","pc":[429,430]},{"teal":481,"source":"contracts\\TicketingPlatform.algo.ts:128","pc":[431,432]},{"teal":485,"source":"contracts\\TicketingPlatform.algo.ts:129","pc":[433]},{"teal":486,"source":"contracts\\TicketingPlatform.algo.ts:129","pc":[434,435]},{"teal":489,"source":"contracts\\TicketingPlatform.algo.ts:126","pc":[436]},{"teal":490,"source":"contracts\\TicketingPlatform.algo.ts:126","pc":[437,438]},{"teal":493,"source":"contracts\\TicketingPlatform.algo.ts:126","pc":[439]},{"teal":498,"source":"contracts\\TicketingPlatform.algo.ts:133","pc":[440,441]},{"teal":499,"source":"contracts\\TicketingPlatform.algo.ts:133","pc":[442]},{"teal":500,"source":"contracts\\TicketingPlatform.algo.ts:133","pc":[443]},{"teal":501,"source":"contracts\\TicketingPlatform.algo.ts:133","pc":[444,445,446]},{"teal":510,"source":"contracts\\TicketingPlatform.algo.ts:134","pc":[447]},{"teal":511,"source":"contracts\\TicketingPlatform.algo.ts:134","pc":[448]},{"teal":512,"source":"contracts\\TicketingPlatform.algo.ts:134","pc":[449,450]},{"teal":516,"source":"contracts\\TicketingPlatform.algo.ts:135","pc":[451,452]},{"teal":517,"source":"contracts\\TicketingPlatform.algo.ts:135","pc":[453,454]},{"teal":521,"source":"contracts\\TicketingPlatform.algo.ts:136","pc":[455,456]},{"teal":522,"source":"contracts\\TicketingPlatform.algo.ts:136","pc":[457,458]},{"teal":523,"source":"contracts\\TicketingPlatform.algo.ts:136","pc":[459,460]},{"teal":527,"source":"contracts\\TicketingPlatform.algo.ts:137","pc":[461,462]},{"teal":528,"source":"contracts\\TicketingPlatform.algo.ts:137","pc":[463,464]},{"teal":531,"source":"contracts\\TicketingPlatform.algo.ts:134","pc":[465]},{"teal":532,"source":"contracts\\TicketingPlatform.algo.ts:134","pc":[466,467]},{"teal":535,"source":"contracts\\TicketingPlatform.algo.ts:134","pc":[468]},{"teal":544,"source":"contracts\\TicketingPlatform.algo.ts:142","pc":[469]},{"teal":545,"source":"contracts\\TicketingPlatform.algo.ts:142","pc":[470]},{"teal":546,"source":"contracts\\TicketingPlatform.algo.ts:142","pc":[471,472]},{"teal":550,"source":"contracts\\TicketingPlatform.algo.ts:143","pc":[473,474]},{"teal":551,"source":"contracts\\TicketingPlatform.algo.ts:143","pc":[475,476]},{"teal":555,"source":"contracts\\TicketingPlatform.algo.ts:144","pc":[477,478]},{"teal":556,"source":"contracts\\TicketingPlatform.algo.ts:144","pc":[479,480]},{"teal":560,"source":"contracts\\TicketingPlatform.algo.ts:12","pc":[481]},{"teal":561,"source":"contracts\\TicketingPlatform.algo.ts:145","pc":[482,483]},{"teal":564,"source":"contracts\\TicketingPlatform.algo.ts:142","pc":[484]},{"teal":565,"source":"contracts\\TicketingPlatform.algo.ts:142","pc":[485,486]},{"teal":568,"source":"contracts\\TicketingPlatform.algo.ts:142","pc":[487]},{"teal":572,"source":"contracts\\TicketingPlatform.algo.ts:149","pc":[488,489]},{"teal":573,"source":"contracts\\TicketingPlatform.algo.ts:149","pc":[490]},{"teal":574,"source":"contracts\\TicketingPlatform.algo.ts:149","pc":[491]},{"teal":575,"source":"contracts\\TicketingPlatform.algo.ts:109","pc":[492]},{"teal":580,"source":"contracts\\TicketingPlatform.algo.ts:155","pc":[493,494,495]},{"teal":581,"source":"contracts\\TicketingPlatform.algo.ts:155","pc":[496]},{"teal":584,"source":"contracts\\TicketingPlatform.algo.ts:155","pc":[497,498]},{"teal":585,"source":"contracts\\TicketingPlatform.algo.ts:155","pc":[499]},{"teal":586,"source":"contracts\\TicketingPlatform.algo.ts:155","pc":[500]},{"teal":587,"source":"contracts\\TicketingPlatform.algo.ts:155","pc":[501]},{"teal":588,"source":"contracts\\TicketingPlatform.algo.ts:155","pc":[502,503]},{"teal":589,"source":"contracts\\TicketingPlatform.algo.ts:155","pc":[504]},{"teal":590,"source":"contracts\\TicketingPlatform.algo.ts:155","pc":[505]},{"teal":593,"source":"contracts\\TicketingPlatform.algo.ts:155","errorMessage":"argument 1 (appCall) for withdrawAsset must be a appl transaction","pc":[506]},{"teal":596,"source":"contracts\\TicketingPlatform.algo.ts:155","pc":[507,508,509]},{"teal":597,"source":"contracts\\TicketingPlatform.algo.ts:155","pc":[510]},{"teal":598,"source":"contracts\\TicketingPlatform.algo.ts:155","pc":[511]},{"teal":602,"source":"contracts\\TicketingPlatform.algo.ts:155","pc":[512,513,514]},{"teal":606,"source":"contracts\\TicketingPlatform.algo.ts:158","pc":[515,516]},{"teal":607,"source":"contracts\\TicketingPlatform.algo.ts:158","pc":[517]},{"teal":608,"source":"contracts\\TicketingPlatform.algo.ts:158","pc":[518]},{"teal":609,"source":"contracts\\TicketingPlatform.algo.ts:158","pc":[519]},{"teal":610,"source":"contracts\\TicketingPlatform.algo.ts:158","pc":[520]},{"teal":611,"source":"contracts\\TicketingPlatform.algo.ts:158","pc":[521]},{"teal":615,"source":"contracts\\TicketingPlatform.algo.ts:161","pc":[522]},{"teal":616,"source":"contracts\\TicketingPlatform.algo.ts:161","pc":[523,524]},{"teal":617,"source":"contracts\\TicketingPlatform.algo.ts:161","pc":[525,526]},{"teal":618,"source":"contracts\\TicketingPlatform.algo.ts:161","pc":[527]},{"teal":619,"source":"contracts\\TicketingPlatform.algo.ts:161","pc":[528,529]},{"teal":620,"source":"contracts\\TicketingPlatform.algo.ts:161","pc":[530]},{"teal":621,"source":"contracts\\TicketingPlatform.algo.ts:161","pc":[531,532]},{"teal":622,"source":"contracts\\TicketingPlatform.algo.ts:161","pc":[533,534]},{"teal":623,"source":"contracts\\TicketingPlatform.algo.ts:161","pc":[535]},{"teal":624,"source":"contracts\\TicketingPlatform.algo.ts:161","pc":[536]},{"teal":631,"source":"contracts\\TicketingPlatform.algo.ts:165","pc":[537]},{"teal":632,"source":"contracts\\TicketingPlatform.algo.ts:165","pc":[538]},{"teal":633,"source":"contracts\\TicketingPlatform.algo.ts:165","pc":[539,540]},{"teal":637,"source":"contracts\\TicketingPlatform.algo.ts:166","pc":[541,542]},{"teal":638,"source":"contracts\\TicketingPlatform.algo.ts:166","pc":[543,544]},{"teal":639,"source":"contracts\\TicketingPlatform.algo.ts:166","pc":[545,546]},{"teal":643,"source":"contracts\\TicketingPlatform.algo.ts:12","pc":[547]},{"teal":644,"source":"contracts\\TicketingPlatform.algo.ts:167","pc":[548,549]},{"teal":647,"source":"contracts\\TicketingPlatform.algo.ts:165","pc":[550]},{"teal":648,"source":"contracts\\TicketingPlatform.algo.ts:165","pc":[551,552]},{"teal":651,"source":"contracts\\TicketingPlatform.algo.ts:165","pc":[553]},{"teal":659,"source":"contracts\\TicketingPlatform.algo.ts:171","pc":[554]},{"teal":660,"source":"contracts\\TicketingPlatform.algo.ts:171","pc":[555,556]},{"teal":661,"source":"contracts\\TicketingPlatform.algo.ts:171","pc":[557,558]},{"teal":665,"source":"contracts\\TicketingPlatform.algo.ts:172","pc":[559,560]},{"teal":666,"source":"contracts\\TicketingPlatform.algo.ts:172","pc":[561,562]},{"teal":667,"source":"contracts\\TicketingPlatform.algo.ts:172","pc":[563,564]},{"teal":671,"source":"contracts\\TicketingPlatform.algo.ts:173","pc":[565,566]},{"teal":672,"source":"contracts\\TicketingPlatform.algo.ts:173","pc":[567,568]},{"teal":676,"source":"contracts\\TicketingPlatform.algo.ts:174","pc":[569]},{"teal":677,"source":"contracts\\TicketingPlatform.algo.ts:174","pc":[570,571]},{"teal":680,"source":"contracts\\TicketingPlatform.algo.ts:171","pc":[572]},{"teal":681,"source":"contracts\\TicketingPlatform.algo.ts:171","pc":[573,574]},{"teal":684,"source":"contracts\\TicketingPlatform.algo.ts:171","pc":[575]},{"teal":688,"source":"contracts\\TicketingPlatform.algo.ts:178","pc":[576,577]},{"teal":689,"source":"contracts\\TicketingPlatform.algo.ts:178","pc":[578]},{"teal":690,"source":"contracts\\TicketingPlatform.algo.ts:178","pc":[579]},{"teal":691,"source":"contracts\\TicketingPlatform.algo.ts:155","pc":[580]},{"teal":694,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[581]},{"teal":695,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[582]},{"teal":698,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[583,584,585,586,587,588]},{"teal":699,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[589,590,591]},{"teal":700,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[592,593,594,595]},{"teal":703,"source":"contracts\\TicketingPlatform.algo.ts:18","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[596]},{"teal":706,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[597,598,599,600,601,602]},{"teal":707,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[603,604,605,606,607,608]},{"teal":708,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[609,610,611,612,613,614]},{"teal":709,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[615,616,617,618,619,620]},{"teal":710,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[621,622,623]},{"teal":711,"source":"contracts\\TicketingPlatform.algo.ts:18","pc":[624,625,626,627,628,629,630,631,632,633]},{"teal":714,"source":"contracts\\TicketingPlatform.algo.ts:18","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[634]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAHAQAGxKkBBCACJgEAMRgUJAsxGQiNDAIkAAAAAAAAAAAAAAIWAAAAAAAAAAAAAACKAQAyCov/cABMSBREsSEEshAyCrITMgqyFIv/shEjshIjsgGziTEWIglJOBAiEkQ2GgEXMRYhBglJOBAhBBJEMRaBAwlJOBAkEkSIAAIiQ4oEAIv9Iw1Ei/44ERa9TEgURDIKi/44EXAATEhBACaL/DgAi/84ABJEi/w4BzIKEkSL/DgIJTIQCBJEi/44EYj/bkIAGYv8OACL/zgAEkSL/DgHMgoSRIv8OAglEkSL/jgAi/84ABJEi/44FDIKEkSL/jgSIhJEi/44ERaL/zgAi/0WUL+JNhoCFzYaARcxFiIJSTgQJBJEiAACIkOKAwCL/SMNRCMhBYv+Fk4Cuov/OAASRIv+Fov/OACL/RZQv4kxFiIJSTgQIhJENhoBFzEWIQYJSTgQJBJEiAACIkOKAwAoRwIhBYEIi/4WTgK6F4wAIyEFi/4WTgK6jAGL/TgIiwAJjAKL/TgAi/84ABJEi/04B4sBEkSL/TgIiwAPRLEhBLIQi/6yEYv/OACyFCKyEiOyAbOLAiMNQQAWsSKyEIsBsgCL/zgAsgeLArIII7IBs7EishAyCrIAiwGyByWyCCOyAbOL/ha8iTYaARcxFiIJSTgQJBJEiAACIkOKAgCL/ha9TEhEIyEFi/4WTgK6i/84ABJEsSKyEIv/OACyByWyCCOyAbOxIQSyEIv/OACyFIv+shEishIjsgGzi/4WvIkiQ4AEuER7NjYaAI4B//EAgASo/nWggASMWfBJgAS93UXfgATDsLjuNhoAjgT93v6O/sn/cwA=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ListingValue = {
  owner: string,
  unitaryPrice: bigint
}


/**
 * Converts the ABI tuple representation of a listingValue to the struct representation
 */
export function ListingValueFromTuple(abiTuple: [string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.listingValue, APP_SPEC.structs) as ListingValue
}

export type ListingKey = {
  asset: bigint
}


/**
 * Converts the ABI tuple representation of a listingKey to the struct representation
 */
export function ListingKeyFromTuple(abiTuple: [bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.listingKey, APP_SPEC.structs) as ListingKey
}

/**
 * The argument types for the TicketingPlatform contract
 */
export type TicketingPlatformArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'newListing(appl,axfer,uint64,pay)void': {
      appCall: AppMethodCallTransactionArgument
      xfer: AppMethodCallTransactionArgument
      unitaryPrice: bigint | number
      mbrPay: AppMethodCallTransactionArgument
    }
    'changePrice(appl,uint64,uint64)void': {
      appCall: AppMethodCallTransactionArgument
      asset: bigint | number
      newPrice: bigint | number
    }
    'buy(appl,uint64,pay)void': {
      appCall: AppMethodCallTransactionArgument
      asset: bigint | number
      buyPay: AppMethodCallTransactionArgument
    }
    'withdrawAsset(appl,uint64)void': {
      appCall: AppMethodCallTransactionArgument
      asset: bigint | number
    }
    'createApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'newListing(appl,axfer,uint64,pay)void': [appCall: AppMethodCallTransactionArgument, xfer: AppMethodCallTransactionArgument, unitaryPrice: bigint | number, mbrPay: AppMethodCallTransactionArgument]
    'changePrice(appl,uint64,uint64)void': [appCall: AppMethodCallTransactionArgument, asset: bigint | number, newPrice: bigint | number]
    'buy(appl,uint64,pay)void': [appCall: AppMethodCallTransactionArgument, asset: bigint | number, buyPay: AppMethodCallTransactionArgument]
    'withdrawAsset(appl,uint64)void': [appCall: AppMethodCallTransactionArgument, asset: bigint | number]
    'createApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type TicketingPlatformReturns = {
  'newListing(appl,axfer,uint64,pay)void': void
  'changePrice(appl,uint64,uint64)void': void
  'buy(appl,uint64,pay)void': void
  'withdrawAsset(appl,uint64)void': void
  'createApplication()void': void
}

/**
 * Defines the types of available calls and state of the TicketingPlatform smart contract.
 */
export type TicketingPlatformTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'newListing(appl,axfer,uint64,pay)void' | 'newListing', {
      argsObj: TicketingPlatformArgs['obj']['newListing(appl,axfer,uint64,pay)void']
      argsTuple: TicketingPlatformArgs['tuple']['newListing(appl,axfer,uint64,pay)void']
      returns: TicketingPlatformReturns['newListing(appl,axfer,uint64,pay)void']
    }>
    & Record<'changePrice(appl,uint64,uint64)void' | 'changePrice', {
      argsObj: TicketingPlatformArgs['obj']['changePrice(appl,uint64,uint64)void']
      argsTuple: TicketingPlatformArgs['tuple']['changePrice(appl,uint64,uint64)void']
      returns: TicketingPlatformReturns['changePrice(appl,uint64,uint64)void']
    }>
    & Record<'buy(appl,uint64,pay)void' | 'buy', {
      argsObj: TicketingPlatformArgs['obj']['buy(appl,uint64,pay)void']
      argsTuple: TicketingPlatformArgs['tuple']['buy(appl,uint64,pay)void']
      returns: TicketingPlatformReturns['buy(appl,uint64,pay)void']
    }>
    & Record<'withdrawAsset(appl,uint64)void' | 'withdrawAsset', {
      argsObj: TicketingPlatformArgs['obj']['withdrawAsset(appl,uint64)void']
      argsTuple: TicketingPlatformArgs['tuple']['withdrawAsset(appl,uint64)void']
      returns: TicketingPlatformReturns['withdrawAsset(appl,uint64)void']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: TicketingPlatformArgs['obj']['createApplication()void']
      argsTuple: TicketingPlatformArgs['tuple']['createApplication()void']
      returns: TicketingPlatformReturns['createApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    box: {
      keys: {}
      maps: {
        listings: Map<ListingKey, ListingValue>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type TicketingPlatformSignatures = keyof TicketingPlatformTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type TicketingPlatformNonVoidMethodSignatures = keyof TicketingPlatformTypes['methods'] extends infer T ? T extends keyof TicketingPlatformTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the TicketingPlatform smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends TicketingPlatformSignatures> = TicketingPlatformTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TicketingPlatform smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TicketingPlatformSignatures> = TicketingPlatformTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = TicketingPlatformTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type TicketingPlatformCreateCallParams =
  | Expand<CallParams<TicketingPlatformArgs['obj']['createApplication()void'] | TicketingPlatformArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<TicketingPlatformArgs['obj']['createApplication()void'] | TicketingPlatformArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type TicketingPlatformDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: TicketingPlatformCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the TicketingPlatform smart contract
 */
export abstract class TicketingPlatformParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends TicketingPlatformCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return TicketingPlatformParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the TicketingPlatform smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<TicketingPlatformArgs['obj']['createApplication()void'] | TicketingPlatformArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the newListing(appl,axfer,uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static newListing(params: CallParams<TicketingPlatformArgs['obj']['newListing(appl,axfer,uint64,pay)void'] | TicketingPlatformArgs['tuple']['newListing(appl,axfer,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'newListing(appl,axfer,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appCall, params.args.xfer, params.args.unitaryPrice, params.args.mbrPay],
    }
  }
  /**
   * Constructs a no op call for the changePrice(appl,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changePrice(params: CallParams<TicketingPlatformArgs['obj']['changePrice(appl,uint64,uint64)void'] | TicketingPlatformArgs['tuple']['changePrice(appl,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'changePrice(appl,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appCall, params.args.asset, params.args.newPrice],
    }
  }
  /**
   * Constructs a no op call for the buy(appl,uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buy(params: CallParams<TicketingPlatformArgs['obj']['buy(appl,uint64,pay)void'] | TicketingPlatformArgs['tuple']['buy(appl,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buy(appl,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appCall, params.args.asset, params.args.buyPay],
    }
  }
  /**
   * Constructs a no op call for the withdrawAsset(appl,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawAsset(params: CallParams<TicketingPlatformArgs['obj']['withdrawAsset(appl,uint64)void'] | TicketingPlatformArgs['tuple']['withdrawAsset(appl,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawAsset(appl,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.appCall, params.args.asset],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the TicketingPlatform smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class TicketingPlatformFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `TicketingPlatformFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new TicketingPlatformClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new TicketingPlatformClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the TicketingPlatform smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: TicketingPlatformDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? TicketingPlatformParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (TicketingPlatformCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new TicketingPlatformClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TicketingPlatform smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<TicketingPlatformArgs['obj']['createApplication()void'] | TicketingPlatformArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(TicketingPlatformParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TicketingPlatform smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<TicketingPlatformArgs['obj']['createApplication()void'] | TicketingPlatformArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(TicketingPlatformParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the TicketingPlatform smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<TicketingPlatformArgs['obj']['createApplication()void'] | TicketingPlatformArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(TicketingPlatformParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | TicketingPlatformReturns['createApplication()void']) }, appClient: new TicketingPlatformClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the TicketingPlatform smart contract
 */
export class TicketingPlatformClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `TicketingPlatformClient`
   *
   * @param appClient An `AppClient` instance which has been created with the TicketingPlatform app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `TicketingPlatformClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends TicketingPlatformNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `TicketingPlatformClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<TicketingPlatformClient> {
    return new TicketingPlatformClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `TicketingPlatformClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<TicketingPlatformClient> {
    return new TicketingPlatformClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the TicketingPlatform smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the TicketingPlatform smart contract using the `newListing(appl,axfer,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    newListing: (params: CallParams<TicketingPlatformArgs['obj']['newListing(appl,axfer,uint64,pay)void'] | TicketingPlatformArgs['tuple']['newListing(appl,axfer,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TicketingPlatformParamsFactory.newListing(params))
    },

    /**
     * Makes a call to the TicketingPlatform smart contract using the `changePrice(appl,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    changePrice: (params: CallParams<TicketingPlatformArgs['obj']['changePrice(appl,uint64,uint64)void'] | TicketingPlatformArgs['tuple']['changePrice(appl,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TicketingPlatformParamsFactory.changePrice(params))
    },

    /**
     * Makes a call to the TicketingPlatform smart contract using the `buy(appl,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buy: (params: CallParams<TicketingPlatformArgs['obj']['buy(appl,uint64,pay)void'] | TicketingPlatformArgs['tuple']['buy(appl,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TicketingPlatformParamsFactory.buy(params))
    },

    /**
     * Makes a call to the TicketingPlatform smart contract using the `withdrawAsset(appl,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawAsset: (params: CallParams<TicketingPlatformArgs['obj']['withdrawAsset(appl,uint64)void'] | TicketingPlatformArgs['tuple']['withdrawAsset(appl,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(TicketingPlatformParamsFactory.withdrawAsset(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the TicketingPlatform smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the TicketingPlatform smart contract using the `newListing(appl,axfer,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    newListing: (params: CallParams<TicketingPlatformArgs['obj']['newListing(appl,axfer,uint64,pay)void'] | TicketingPlatformArgs['tuple']['newListing(appl,axfer,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TicketingPlatformParamsFactory.newListing(params))
    },

    /**
     * Makes a call to the TicketingPlatform smart contract using the `changePrice(appl,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    changePrice: (params: CallParams<TicketingPlatformArgs['obj']['changePrice(appl,uint64,uint64)void'] | TicketingPlatformArgs['tuple']['changePrice(appl,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TicketingPlatformParamsFactory.changePrice(params))
    },

    /**
     * Makes a call to the TicketingPlatform smart contract using the `buy(appl,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buy: (params: CallParams<TicketingPlatformArgs['obj']['buy(appl,uint64,pay)void'] | TicketingPlatformArgs['tuple']['buy(appl,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TicketingPlatformParamsFactory.buy(params))
    },

    /**
     * Makes a call to the TicketingPlatform smart contract using the `withdrawAsset(appl,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawAsset: (params: CallParams<TicketingPlatformArgs['obj']['withdrawAsset(appl,uint64)void'] | TicketingPlatformArgs['tuple']['withdrawAsset(appl,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(TicketingPlatformParamsFactory.withdrawAsset(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the TicketingPlatform smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the TicketingPlatform smart contract using the `newListing(appl,axfer,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    newListing: async (params: CallParams<TicketingPlatformArgs['obj']['newListing(appl,axfer,uint64,pay)void'] | TicketingPlatformArgs['tuple']['newListing(appl,axfer,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TicketingPlatformParamsFactory.newListing(params))
      return {...result, return: result.return as unknown as (undefined | TicketingPlatformReturns['newListing(appl,axfer,uint64,pay)void'])}
    },

    /**
     * Makes a call to the TicketingPlatform smart contract using the `changePrice(appl,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    changePrice: async (params: CallParams<TicketingPlatformArgs['obj']['changePrice(appl,uint64,uint64)void'] | TicketingPlatformArgs['tuple']['changePrice(appl,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TicketingPlatformParamsFactory.changePrice(params))
      return {...result, return: result.return as unknown as (undefined | TicketingPlatformReturns['changePrice(appl,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the TicketingPlatform smart contract using the `buy(appl,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buy: async (params: CallParams<TicketingPlatformArgs['obj']['buy(appl,uint64,pay)void'] | TicketingPlatformArgs['tuple']['buy(appl,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TicketingPlatformParamsFactory.buy(params))
      return {...result, return: result.return as unknown as (undefined | TicketingPlatformReturns['buy(appl,uint64,pay)void'])}
    },

    /**
     * Makes a call to the TicketingPlatform smart contract using the `withdrawAsset(appl,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawAsset: async (params: CallParams<TicketingPlatformArgs['obj']['withdrawAsset(appl,uint64)void'] | TicketingPlatformArgs['tuple']['withdrawAsset(appl,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(TicketingPlatformParamsFactory.withdrawAsset(params))
      return {...result, return: result.return as unknown as (undefined | TicketingPlatformReturns['withdrawAsset(appl,uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new TicketingPlatformClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current TicketingPlatform app
   */
  state = {
    /**
     * Methods to access box state for the current TicketingPlatform app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the listings map in box state
       */
      listings: {
        /**
         * Get all current values of the listings map in box state
         */
        getMap: async (): Promise<Map<ListingKey, ListingValue>> => { return (await this.appClient.state.box.getMap("listings")) as Map<ListingKey, ListingValue> },
        /**
         * Get a current value of the listings map by key from box state
         */
        value: async (key: ListingKey): Promise<ListingValue | undefined> => { return await this.appClient.state.box.getMapValue("listings", key) as ListingValue | undefined },
      },
    },
  }

  public newGroup(): TicketingPlatformComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a newListing(appl,axfer,uint64,pay)void method call against the TicketingPlatform contract
       */
      newListing(params: CallParams<TicketingPlatformArgs['obj']['newListing(appl,axfer,uint64,pay)void'] | TicketingPlatformArgs['tuple']['newListing(appl,axfer,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.newListing(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a changePrice(appl,uint64,uint64)void method call against the TicketingPlatform contract
       */
      changePrice(params: CallParams<TicketingPlatformArgs['obj']['changePrice(appl,uint64,uint64)void'] | TicketingPlatformArgs['tuple']['changePrice(appl,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changePrice(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a buy(appl,uint64,pay)void method call against the TicketingPlatform contract
       */
      buy(params: CallParams<TicketingPlatformArgs['obj']['buy(appl,uint64,pay)void'] | TicketingPlatformArgs['tuple']['buy(appl,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buy(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdrawAsset(appl,uint64)void method call against the TicketingPlatform contract
       */
      withdrawAsset(params: CallParams<TicketingPlatformArgs['obj']['withdrawAsset(appl,uint64)void'] | TicketingPlatformArgs['tuple']['withdrawAsset(appl,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the TicketingPlatform contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as TicketingPlatformComposer
  }
}
export type TicketingPlatformComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the newListing(appl,axfer,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  newListing(params?: CallParams<TicketingPlatformArgs['obj']['newListing(appl,axfer,uint64,pay)void'] | TicketingPlatformArgs['tuple']['newListing(appl,axfer,uint64,pay)void']>): TicketingPlatformComposer<[...TReturns, TicketingPlatformReturns['newListing(appl,axfer,uint64,pay)void'] | undefined]>

  /**
   * Calls the changePrice(appl,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changePrice(params?: CallParams<TicketingPlatformArgs['obj']['changePrice(appl,uint64,uint64)void'] | TicketingPlatformArgs['tuple']['changePrice(appl,uint64,uint64)void']>): TicketingPlatformComposer<[...TReturns, TicketingPlatformReturns['changePrice(appl,uint64,uint64)void'] | undefined]>

  /**
   * Calls the buy(appl,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buy(params?: CallParams<TicketingPlatformArgs['obj']['buy(appl,uint64,pay)void'] | TicketingPlatformArgs['tuple']['buy(appl,uint64,pay)void']>): TicketingPlatformComposer<[...TReturns, TicketingPlatformReturns['buy(appl,uint64,pay)void'] | undefined]>

  /**
   * Calls the withdrawAsset(appl,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawAsset(params?: CallParams<TicketingPlatformArgs['obj']['withdrawAsset(appl,uint64)void'] | TicketingPlatformArgs['tuple']['withdrawAsset(appl,uint64)void']>): TicketingPlatformComposer<[...TReturns, TicketingPlatformReturns['withdrawAsset(appl,uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the TicketingPlatform smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): TicketingPlatformComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): TicketingPlatformComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<TicketingPlatformComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<TicketingPlatformComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<TicketingPlatformComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<TicketingPlatformComposerResults<TReturns>>
}
export type TicketingPlatformComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

